#
# Copyright (c) 2007-2014 Kaazing Corporation. All rights reserved.
# 
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Autobahn test case 5.20

# Case Description
# Same as Case 5.19, but send all frames with SYNC = True. 
# Note, this does not change the octets sent in any way, only how the stream is chopped up on the wire.

# Case Expectation
# Same as Case 5.19. Implementations must be agnostic to how octet stream is chopped up on wire (must be TCP clean).

accept tcp://localhost:8001
accepted
connected

read "GET /echo/;e/cookies?.krn="
read /\d*/ "&.kl=Y HTTP/1.1" "\r\n"
read /User-Agent: .*/ "\r\n"
read "Host: localhost:8001\r\n"
read "Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\r\n"
read "Connection: keep-alive\r\n"
read "\r\n"

write "HTTP/1.1 200 OK\r\n"
write "Content-Type: text/plain; charset=UTF-8\r\n"
write "Date: Fri, 06 Jun 2014 18:22:04 GMT\r\n"
write "Location: http://localhost:8001/echo/;e/cookies?.kl=Y\r\n"
write "Server: Kaazing Gateway\r\n"
write "Content-Length: 0\r\n"
write "\r\n"

close
closed

accepted
connected

read "GET /echo?.kl=Y HTTP/1.1\r\n"
read "Upgrade: websocket\r\n"
read "Connection: Upgrade\r\n"
read "Host: localhost:8001\r\n"
read "Origin: privileged://localhost:8001\r\n"
read "Sec-WebSocket-Version: 13\r\n"
read /Sec-WebSocket-Key: (?<webSocketKey>.+)/ "\r\n"
read "Sec-WebSocket-Protocol: x-kaazing-handshake\r\n"
read "\r\n"

write "HTTP/1.1 101 Web Socket Protocol Handshake\r\n"
write "Connection: Upgrade\r\n"
write "Date: Fri, 06 Jun 2014 18:22:04 GMT\r\n"
write "Sec-WebSocket-Accept: "
write ${ws:handshakeHash(webSocketKey)}
write "\r\n"
write "Server: Kaazing Gateway\r\n"
write "Upgrade: WebSocket\r\n"
write "\r\n"

# Note there is no way to send with SYNC = True via robot scripts, so data has been chopped up randomly 

# Websocket text in fragments part 1 & 2
write [0x01] 
write [0x09]
write "fr"
write "agme"
write "nt1"
write [0x00 0x09]
write "fragmen"
write "t2"

# Websocket ping with payload
write [0x89 0x09 0x70]
write [0x6f 0x6e]
write [0x67] 
write [0x6d] 
write [0x65 0x20 0x31 0x21]

# Websocket pong with payload
read [0x8a 0x89]
read [(:maskingKey){4}]
read option mask ${maskingKey}
read [0x70 0x6f 0x6e 0x67 0x6d 0x65 0x20 0x31 0x21]
read option mask [0x00]

# Websocket text in fragments continued
write [0x00] 
write [0x09]
write "f"
write "rag"
write "ment3"
write [0x00 0x09]
write "fr"
write "agment"
write "4"

# Websocket ping with payload
write [0x89 0x09 0x70 0x6f 0x6e 0x67]
write [0x6d 0x65 0x20 0x32]
write [0x21]

# Websocket pong with payload
read [0x8a 0x89]
read [(:maskingKey){4}]
read option mask ${maskingKey}
read [0x70 0x6f 0x6e 0x67 0x6d 0x65 0x20 0x32 0x21]
read option mask [0x00]

# Websocket text in fragments finished
write [0x80] 
write [0x09]
write "f"
write "rag"
write "me"
write "nt"
write "5"

# Websocket text with payload
read [0x81 0xa8]
read [(:maskingKey){4}]
read option mask ${maskingKey}
read "fragment1fragment2fragment3fragment4fragment5"
read option mask [0x00]


# Websocket close with normal closure
write [0x88 0x02 0x03 0xe8]
read [0x88 0x82]
read [(:maskingKey){4}]
read option mask ${maskingKey}
read [0x03 0xe8]
read option mask [0x00]

close
closed